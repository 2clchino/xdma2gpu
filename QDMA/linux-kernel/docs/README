###############################################################################

                 Xilinx QDMA Software README

###############################################################################


_____________________________________________________________________________
Contents

1.   Installation
     1.1   Compiling the QDMA Software
     1.2   Installing the compiled binaries
     1.3   Loading the Kernel module
2    Configuration
     2.1   Configuring Queues
3.   Xilinx "dmactl" Command-line Utility
     3.1   Using dmactl for query the QDMA devices/functions
     3.2   Using dmactl for Queue control
4.   QDMA test script
     Sample scripts to run simple MM and ST transfers 
_____________________________________________________________________________

1. Installation:

  1.1 Compiling the QDMA Software:
  --------------------------------

  In order to compile the Xilinx QDMA software, a configured and compiled
  Linux kernel source tree is required. The source tree may be only compiled
  header files, or a complete tree. The source tree needs to be configured
  and the header files need to be compiled. And, the Linux kernel must be
  configured to use  modules.

  Additionally, the /lib/modules must have been set up for this particular
  kernel
  (i.e. "make modules_install" has been run with the Linux kernel source tree).

  a.	QDMA Linux Kernel Driver is available in Xilinx github at 
		https://github.com/Xilinx/dma_ip_drivers/QDMA/linux-kernel

  b.	Compile the Xilinx QDMA Linux driver:

  	[xilinx@]# make

	a sub-directory build/ will be created as a result of running "make".

	By default, both PF driver (qdma.ko) and VF driver (qdma_vf.ko) will
	be compiled.

	If only PF driver is desired:
  	[xilinx@]# make pf

	If only VF driver is desired:
  	[xilinx@]# make vf

  1.2 Installing the compiled binaries:
  -------------------------------------

  To install the QDMA software, the installer must be the root user, then
  run "make install".

  [xilinx@]# make install

  The QDMA module will be installed in the
  /lib/modules/<linux_kernel_version>/updates/kernel/drivers/qdma directory.

  The dmactl tool will be installed in /user/local/sbin.

  Example application software to issue DMA requests:
  dma_to_device for H2C queues and 
  dma_from_device for C2H queues
  will be installed in /user/local/sbin.


  1.3 Loading the Kernel module:
  --------------------------------

  Kernel module cane be loaded in following different modes
  0 - Auto Mode, driver decides to process the request in poll or interrupt mode
  1 - Poll Mode
  2 - Direct Interrupt Mode
  3 - Interrupt Aggregation Mode or Indirect Interrupt Mode
  4 - Legacy Interrupt Mode

  Find the QDMA device bus number from lspci. Ex : 01:00.0 is the BDF of the device.
  By default, all the functions are loaded in Auto Mode.
  To load a device in any other mode, load the module as follows:
  
  [root@]# modprobe qdma mode=0x<device_bus_number><pf0_mode><pf1_mode><pf2_mode><pf3_mode>
  
	or
	
  [root@]# modprobe qdma mode=0x<device_bus_number><vfg0_mode><vfg1_mode><vfg2_mode><vfg3_mode>
    
  To load the module in poll mode run modprobe as follows:

  [root@]# modprobe qdma mode=0x011111

  Or on a VM:
  [root@]# modprobe qdma_vf mode=0x011111

  To load the module in direct interrupt mode run modprobe as follows:

  [root@]# modprobe qdma mode=0x012222

  To load the module in indirect interrupt mode run modprobe as follows:

  [root@]# modprobe qdma mode=0x013333
   
  To load the module with each pf is different mode, run modprobe as follows:

  [root@]# modprobe qdma mode=0x011234
  
  To set a master pf other than the first pf, load the module as follows:

  [root@]# modprobe qdma master_pf=0x<bbddf>

  Note:<bbddf> can figured out for a pf from 'lspci' output 
        bb - bus number
        dd - device number
         f -  function number
  
  Now the QDMA software is ready for use.

2. Configuration

  2.1 Configuring Queues
  -------------------------------------

  To configure a QDMA queue, there are three minimum required parameters
  (in the form of key value pairs) needed to be configured.

       idx <N>:	        The 0-based queue index on the function.
       mode <mm | st>:  queue mode, default to "mm"
       dir <h2c | c2h>: queue direction, default to "h2c"

  - "idx" is a 0-based unique index on the function.
    *With the 2018.2 release, the range is
	0 ~ (512 - 8 * total # of VFs) on a physical function and
	0 ~ 7 on a virtual function

  - "mode" is the operation mode of the queue.
	It is either memory mapped (mm) or streaming mode (st)

  - "dir" is the direction of the queue.
	It is either host to card (h2c) or card to host (c2h).

  A h2c queue and a c2h queue can share the same index. In other word, a index
  represents a pair of queues: one on h2c direction and the other on the c2h
  direction.


3. Xilinx "dmactl" Command-line Configuration Utility:

  The Xilinx QDMA control tool, dmactl, is a Command Line utility
  which is installed in /usr/local/sbin/ and allows administration of the
  Xilinx QDMA queues. It can perform the following functions:

  - query the qdma functions/devices the driver has bind into.

  - list all of the queues on a device/function
  - add/configure a new queues on a device/function
  - start an already added/configured queue (i.e., bring the queue online)
  - stop an started queue (i.e., bring the queue offline)
  - delete an already added/configured queue

  register access:
  - read a register
  - write a register
  - dump the qdma config bar and user bar registers

  debug helper
  - display a queue's configuration parameters
  - display a queue's descriptor ring entries
  - display a ch2 queue's completion ring entries
  - display the interrupt ring entries in indirect interrupt mode

  Apart from the above basic commands, there are various other commands
  available in dmactl to add/start/stop/del list of queues at the same time

  For help run:
    dmactl -h
       (or)
    man dmactl


  3.1 Using dmactl for query the QDMA devices/functions
  -------------------------------------

  Please refer User Guide/dmactl man page to find all options and parameters
  available.

    1. Get the list of devices the driver has bind with

      [root@]# dmactl dev list

	qdma06000	0000:06:00.0	max QP: 32
	qdma06001	0000:06:00.1	max QP: 32

      The above example output shows 2 QDMA functions/devices.
      one is at pci BDF: 06:00.0
      the other is at pci BDF: 06:00.1


  3.2 Using dmactl for Queue control
  -------------------------------------

  Please refer User Guide to find all options and parameters available.

    a. Add/Configure a queue

      To add a MM H2C queue on qdma06000 in the above example:

      [root@]# dmactl qdma06000 q add idx 0 mode mm dir h2c

      *A character device /dev/qdma06000-MM-0 would be created.

      To add a MM C2H queue on qdma06000:

      [root@]# dmactl qdma06000 q add idx 0 mode mm dir c2h

      *A character device /dev/qdma06000-MM-0 would be created.

    b. Start an added queue

      To start the MM H2C queue on qdma06000 added in the previous example:

      [root@]# dmactl qdma06000 q start idx 0 dir h2c

      *After the queue is started the normal read and write operation can be
       performed on the character device /dev/qdma06000-MM-0.

      To start the MM C2H queue on qdma06000 added in the previous example:

      [root@]# dmactl qdma06000 q start idx 0 dir c2h

      *After the queue is started the normal read and write operation can be
       performed on the character device /dev/qdma06000-MM-0.

    c. Stop a queue

      [root@]# dmactl qdma06000 q start idx 0 dir h2c
      [root@]# dmactl qdma06000 q start idx 0 dir c2h


    d. Delete a queue

      [root@]# dmactl qdma06000 q del idx 0 dir h2c
      [root@]# dmactl qdma06000 q del idx 0 dir c2h


4. QDMA test script

    Test scripts are in scripts/ directory

    To use the scripts in this directory, "make" and "make install" must be run
    install the dma_from_device and dma_to_device applications.

    qdma_run_test.sh 
	The script does the following dma operations:

    	PF AXI-MM :     H2C/C2H AXI-MM transfer and check for data correctness.
	PF AXI-ST-H2C : H2C AXI-ST transfer and read data register on user side
  		        to check if the data if correct.
	PF AXI-ST-C2H : C2H AXI-St transfer and check data for correctness.

	All the above transfers are done for 4 [0 to 3] Queues.

    qdma_run_test_mm_vf.sh
    	VF AXI-MM : Script runs H2C/C2H AXI-MM transfer and check for data
		    correctness.

	All the above transfers are done for 4 [0 to 3] Queues.

    qdma_run_test_st_vf.sh
	VF AXI-ST-H2C : H2C AXI-ST transfer and read data register on user side
	  	        to check if the data if correct.
	VF AXI-ST-C2H : C2H AXI-St transfer and check data for correctness.

	All the above transfers are done for 4 [0 to 3] Queues.
