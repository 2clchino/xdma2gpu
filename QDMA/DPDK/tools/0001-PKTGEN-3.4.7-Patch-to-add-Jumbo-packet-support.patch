From ccc6a165e55b121ee39536c279af38e9866f3f68 Mon Sep 17 00:00:00 2001
From: Nikhil Agarwal <nagarwal@xilinx.com>
Date: Tue, 21 Aug 2018 00:24:51 -0600
Subject: [PATCH] PKTGEN-3.4.5: Patch to add Jumbo packet support.

This patch include:
1. Jumbo frame support for Pktgen.
2. Increase default number of RX_DESC to 2K.
3. Disable RX classification.

Signed-off-by: Kumar Sanghvi <kumars@xilinx.com>
Signed-off-by: Nikhil Agarwal <nagarwal@xilinx.com>
---
 app/pktgen-cmds.c      | 15 +++++++++++----
 app/pktgen-constants.h |  3 ++-
 app/pktgen-main.c      |  7 ++++++-
 app/pktgen-port-cfg.c  | 14 ++++++++------
 app/pktgen-range.c     |  3 ++-
 app/pktgen.c           | 21 +++++++++++++++------
 app/pktgen.h           |  4 +++-
 7 files changed, 47 insertions(+), 20 deletions(-)

diff --git a/app/pktgen-cmds.c b/app/pktgen-cmds.c
index 66ea98a..be97d35 100644
--- a/app/pktgen-cmds.c
+++ b/app/pktgen-cmds.c
@@ -2443,6 +2443,10 @@ debug_set_tx_cycles(port_info_t *info, uint32_t cycles)
 void
 single_set_pkt_size(port_info_t *info, uint16_t size)
 {
+	uint16_t pktsize = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+			   MAX_PKT_SIZE:
+			   (ETHER_MAX_LEN - ETHER_CRC_LEN);
+
 	pkt_seq_t * pkt = &info->seq_pkt[SINGLE_PKT];
 
 	if (size < FCS_SIZE)
@@ -2452,8 +2456,8 @@ single_set_pkt_size(port_info_t *info, uint16_t size)
 		if ( (size - FCS_SIZE) < MIN_PKT_SIZE)
 			size = (MIN_PKT_SIZE + FCS_SIZE);
 	}
-	if ( (size - FCS_SIZE) > MAX_PKT_SIZE)
-		size = MAX_PKT_SIZE + FCS_SIZE;
+	if ( (size - FCS_SIZE) > pktsize)
+		size = pktsize + FCS_SIZE;
 
 	if ((pkt->ethType == ETHER_TYPE_IPv6) && (size < (MIN_v6_PKT_SIZE + FCS_SIZE)))
 		size = MIN_v6_PKT_SIZE + FCS_SIZE;
@@ -3007,6 +3011,9 @@ range_set_cos_id(port_info_t *info, char *what, uint8_t id)
 void
 range_set_pkt_size(port_info_t *info, char *what, uint16_t size)
 {
+	uint32_t pktsize = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+			   MAX_9K_SIZE : ETHER_MAX_LEN;
+
 	if (!strcmp(what, "inc") || !strcmp(what, "increment")) {
 		if (size > ETHER_MIN_LEN)
 			size = ETHER_MIN_LEN;
@@ -3015,8 +3022,8 @@ range_set_pkt_size(port_info_t *info, char *what, uint16_t size)
 	} else {
 		if (size < ETHER_MIN_LEN)
 			size = MIN_PKT_SIZE;
-		else if (size > ETHER_MAX_LEN)
-			size = MAX_PKT_SIZE;
+		else if (size > pktsize)
+			size = pktsize;
 		else
 			size -= FCS_SIZE;
 
diff --git a/app/pktgen-constants.h b/app/pktgen-constants.h
index 1dc7c1a..bd5ce07 100644
--- a/app/pktgen-constants.h
+++ b/app/pktgen-constants.h
@@ -17,7 +17,7 @@ extern "C" {
 enum {
 	DEFAULT_PKT_BURST       = 64,	/* Increasing this number consumes memory very fast */
 #ifdef RTE_LIBRTE_VMXNET3_PMD
-	DEFAULT_RX_DESC         = (DEFAULT_PKT_BURST * 8 * 2),
+	DEFAULT_RX_DESC         = (DEFAULT_PKT_BURST * 8 * 2 * 2),
 	DEFAULT_TX_DESC         = DEFAULT_RX_DESC * 2,
 #else
 	DEFAULT_RX_DESC         = (DEFAULT_PKT_BURST * 8),
@@ -30,6 +30,7 @@ enum {
 
 	DEFAULT_PRIV_SIZE       = 0,
 	MBUF_SIZE		= RTE_MBUF_DEFAULT_BUF_SIZE + DEFAULT_PRIV_SIZE, /* See: http://dpdk.org/dev/patchwork/patch/4479/ */
+	MBUF_9K_SIZE		= 9018 + RTE_PKTMBUF_HEADROOM + DEFAULT_PRIV_SIZE,
 
 	NUM_Q                   = 8,	/**< Number of cores per port. */
 };
diff --git a/app/pktgen-main.c b/app/pktgen-main.c
index 8a10156..3ed1978 100644
--- a/app/pktgen-main.c
+++ b/app/pktgen-main.c
@@ -161,7 +161,7 @@ pktgen_parse_args(int argc, char **argv)
 	for (opt = 0; opt < argc; opt++)
 		pktgen.argv[opt] = strdup(argv[opt]);
 
-	while ((opt = getopt_long(argc, argvopt, "p:m:f:l:s:g:hPNGT",
+	while ((opt = getopt_long(argc, argvopt, "p:m:f:l:s:g:hPNGT9",
 				  lgopts, &option_index)) != EOF)
 		switch (opt) {
 		case 'p':
@@ -239,6 +239,11 @@ pktgen_parse_args(int argc, char **argv)
 			pktgen_usage(prgname);
 			return -1;
 
+		case '9': /* MTU 9K support */
+			pktgen_log_info("%s: case 9... \n", __func__);
+			pktgen.flags    |= MTU9K_SUPPORT_FLAG;
+			break;
+
 		case 0:	/* crc-strip for all ports */
 			pktgen_set_hw_strip_crc(1);
 			break;
diff --git a/app/pktgen-port-cfg.c b/app/pktgen-port-cfg.c
index f53d0ec..8b9d478 100644
--- a/app/pktgen-port-cfg.c
+++ b/app/pktgen-port-cfg.c
@@ -91,6 +91,8 @@ pktgen_mbuf_pool_create(const char *type, uint8_t pid, uint8_t queue_id,
 			uint32_t nb_mbufs, int socket_id, int cache_size){
 	struct rte_mempool *mp;
 	char name[RTE_MEMZONE_NAMESIZE];
+	uint16_t mbuf_sz = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+			   MBUF_9K_SIZE : MBUF_SIZE;
 
 	snprintf(name, sizeof(name), "%-12s%u:%u", type, pid, queue_id);
 	pktgen_log_info(
@@ -98,23 +100,23 @@ pktgen_mbuf_pool_create(const char *type, uint8_t pid, uint8_t queue_id,
 		16,
 		name,
 		nb_mbufs,
-		MBUF_SIZE,
+		mbuf_sz,
 		sizeof(struct rte_mbuf),
 		sizeof(struct rte_mempool),
-		(((nb_mbufs * (MBUF_SIZE + sizeof(struct rte_mbuf)) +
+		(((nb_mbufs * (mbuf_sz + sizeof(struct rte_mbuf)) +
 		   sizeof(struct rte_mempool))) + 1023) / 1024,
 		RTE_PKTMBUF_HEADROOM,
 		RTE_MBUF_DEFAULT_BUF_SIZE);
 	pktgen.mem_used += ((nb_mbufs *
-		(MBUF_SIZE + sizeof(struct rte_mbuf)) +
+		(mbuf_sz + sizeof(struct rte_mbuf)) +
 		sizeof(struct rte_mempool)));
 	pktgen.total_mem_used += ((nb_mbufs *
-		(MBUF_SIZE + sizeof(struct rte_mbuf)) +
+		(mbuf_sz + sizeof(struct rte_mbuf)) +
 		sizeof(struct rte_mempool)));
 
 	/* create the mbuf pool */
 	mp = rte_pktmbuf_pool_create(name, nb_mbufs, cache_size,
-		DEFAULT_PRIV_SIZE, MBUF_SIZE, socket_id);
+		DEFAULT_PRIV_SIZE, mbuf_sz, socket_id);
 	if (mp == NULL)
 		pktgen_log_panic(
 			"Cannot create mbuf pool (%s) port %d, queue %d, nb_mbufs %d, socket_id %d: %s",
@@ -250,7 +252,7 @@ pktgen_config_ports(void)
 	pktgen_log_info(
 		"Configuring %d ports, MBUF Size %d, MBUF Cache Size %d",
 		pktgen.nb_ports,
-		MBUF_SIZE,
+		(pktgen.flags & MTU9K_SUPPORT_FLAG) ? MBUF_9K_SIZE : MBUF_SIZE,
 		MBUF_CACHE_SIZE);
 
 	/* For each lcore setup each port that is handled by that lcore. */
diff --git a/app/pktgen-range.c b/app/pktgen-range.c
index e59ae01..36b5924 100644
--- a/app/pktgen-range.c
+++ b/app/pktgen-range.c
@@ -568,7 +568,8 @@ pktgen_range_setup(port_info_t *info)
 	range->pkt_size     = MIN_PKT_SIZE;
 	range->pkt_size_inc = 0;
 	range->pkt_size_min = MIN_PKT_SIZE;
-	range->pkt_size_max = MAX_PKT_SIZE;
+	range->pkt_size_max = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+			      MAX_PKT_SIZE : (ETHER_MAX_LEN - ETHER_CRC_LEN);
 
 	info->seq_pkt[RANGE_PKT].pktSize = MIN_PKT_SIZE;
 
diff --git a/app/pktgen.c b/app/pktgen.c
index dd1a93a..68579b1 100644
--- a/app/pktgen.c
+++ b/app/pktgen.c
@@ -273,7 +273,7 @@ _send_burst_fast(port_info_t *info, uint16_t qid)
 
 	pkts    = mtab->m_table;
 
-	retry = 100;
+	retry = 100000;
 	if (rte_atomic32_read(&info->port_flags) & PROCESS_TX_TAP_PKTS)
 		while (cnt && retry) {
 			ret = rte_eth_tx_burst(info->pid, qid, pkts, cnt);
@@ -294,6 +294,8 @@ _send_burst_fast(port_info_t *info, uint16_t qid)
 			if (!ret)
 				retry--;
 		}
+	if(cnt)
+		rte_pktmbuf_free_bulk(pkts, cnt);
 }
 
 /**************************************************************************//**
@@ -880,6 +882,9 @@ pktgen_setup_cb(struct rte_mempool *mp,
 	port_info_t *info;
 	pkt_seq_t *pkt;
 	uint16_t qid;
+	uint32_t pktsize = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+			   MAX_PKT_SIZE:
+			   (ETHER_MAX_LEN - ETHER_CRC_LEN);
 
 	info = data->info;
 	qid = data->qid;
@@ -898,7 +903,7 @@ pktgen_setup_cb(struct rte_mempool *mp,
 		pktgen_packet_ctor(info, SINGLE_PKT, -1);
 
 		rte_memcpy((uint8_t *)m->buf_addr + m->data_off,
-			   (uint8_t *)&pkt->hdr, MAX_PKT_SIZE);
+			   (uint8_t *)&pkt->hdr, pktsize);
 
 		m->pkt_len  = pkt->pktSize;
 		m->data_len = pkt->pktSize;
@@ -907,7 +912,7 @@ pktgen_setup_cb(struct rte_mempool *mp,
 		pktgen_packet_ctor(info, RANGE_PKT, -1);
 
 		rte_memcpy((uint8_t *)m->buf_addr + m->data_off,
-			   (uint8_t *)&pkt->hdr, MAX_PKT_SIZE);
+			   (uint8_t *)&pkt->hdr, pktsize);
 
 		m->pkt_len  = pkt->pktSize;
 		m->data_len = pkt->pktSize;
@@ -925,7 +930,7 @@ pktgen_setup_cb(struct rte_mempool *mp,
 					pktgen_packet_ctor(info, info->seqIdx, -1);
 
 					rte_memcpy((uint8_t *)m->buf_addr + m->data_off,
-						   (uint8_t *)&pkt->hdr, MAX_PKT_SIZE);
+						   (uint8_t *)&pkt->hdr, pktsize);
 					m->pkt_len  = pkt->pktSize;
 					m->data_len = pkt->pktSize;
 					pkt = &info->seq_pkt[info->seqIdx];
@@ -937,7 +942,7 @@ pktgen_setup_cb(struct rte_mempool *mp,
 			pktgen_packet_ctor(info, info->seqIdx, -1);
 
 			rte_memcpy((uint8_t *)m->buf_addr + m->data_off,
-				   (uint8_t *)&pkt->hdr, MAX_PKT_SIZE);
+				   (uint8_t *)&pkt->hdr, pktsize);
 
 			m->pkt_len  = pkt->pktSize;
 			m->data_len = pkt->pktSize;
@@ -1121,7 +1126,7 @@ pktgen_main_receive(port_info_t *info,
 {
 	uint8_t pid;
 	uint16_t qid, nb_rx;
-	capture_t *capture;
+	__rte_unused capture_t *capture;
 
 	pid = info->pid;
 	qid = get_rxque(pktgen.l2p, lid, pid);
@@ -1133,7 +1138,10 @@ pktgen_main_receive(port_info_t *info,
 		return;
 
 	info->q[qid].rx_cnt += nb_rx;
+	info->sizes._64 += nb_rx;
 
+	rte_pktmbuf_free_bulk(pkts_burst, nb_rx);
+#if 0
 	pktgen_recv_latency(info, pkts_burst, nb_rx);
 
 	/* packets are not freed in the next call. */
@@ -1150,6 +1158,7 @@ pktgen_main_receive(port_info_t *info,
 	}
 
 	rte_pktmbuf_free_bulk(pkts_burst, nb_rx);
+#endif
 }
 
 static void
diff --git a/app/pktgen.h b/app/pktgen.h
index f830c81..892875e 100644
--- a/app/pktgen.h
+++ b/app/pktgen.h
@@ -219,8 +219,9 @@ enum {
 	INTER_FRAME_GAP         = 12,	/**< in bytes */
 	PKT_PREAMBLE_SIZE       = 8,	/**< in bytes */
 	FCS_SIZE                = 4,	/**< in bytes */
+	MAX_9K_SIZE		= 9018,
 	MIN_PKT_SIZE            = (ETHER_MIN_LEN - FCS_SIZE),
-	MAX_PKT_SIZE            = (ETHER_MAX_LEN - FCS_SIZE),
+	MAX_PKT_SIZE            = (MAX_9K_SIZE - FCS_SIZE),
 	MIN_v6_PKT_SIZE         = (78 - FCS_SIZE),
 
 	MAX_RX_QUEUES           = 16,	/**< RX Queues per port */
@@ -314,6 +315,7 @@ enum {						/* Pktgen flags bits */
 	BLINK_PORTS_FLAG        = (1 << 10),	/**< Blink the port leds */
 	ENABLE_THEME_FLAG       = (1 << 11),	/**< Enable theme or color support */
 
+	MTU9K_SUPPORT_FLAG	= (1 << 15),	/**< MTU 9K support */
 	CONFIG_PAGE_FLAG        = (1 << 16),	/**< Display the configure page */
 	SEQUENCE_PAGE_FLAG      = (1 << 17),	/**< Display the Packet sequence page */
 	RANGE_PAGE_FLAG         = (1 << 18),	/**< Display the range page */
-- 
2.7.4

